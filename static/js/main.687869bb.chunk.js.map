{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["quotes","require","Quotes","colors","Colors","App","props","React","Component","QuoteBox","quotenum","parseInt","Math","random","length","colornum","state","quote","author","color","prevcolors","prevquotes","changeQuote","bind","newquote","newcolor","this","setState","buttonClass","classNames","className","style","backgroundColor","transition","onClick","window","open","encodeURIComponent","icon","faTwitter","faTumblr","ref","fontSize","marginTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.687869bb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport { render } from '@testing-library/react';\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTumblr, faTwitter } from '@fortawesome/free-brands-svg-icons';\n\nconst quotes = require('./assets/quotes.json').Quotes;\nconst colors = require('./assets/colors.json').Colors;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n        <QuoteBox />\n    );\n  }\n}\n\nclass QuoteBox extends React.Component {\n  constructor(props) {\n    super(props);\n    let quotenum = parseInt(Math.random() * quotes.length);\n    let colornum = parseInt(Math.random() * colors.length);\n    this.state = {\n      quote: quotes[quotenum].quote,\n      author: quotes[quotenum].author,\n      color: colors[colornum],\n      prevcolors: [colornum],\n      prevquotes: [quotenum],\n    }\n    this.changeQuote = this.changeQuote.bind(this);\n  }\n\n  changeQuote() {\n    let newquote = parseInt(Math.random() * quotes.length);\n    let newcolor = parseInt(Math.random() * colors.length);\n    this.setState((state) => {\n      while (newcolor === state.prevcolors[state.prevcolors.length - 1] || newcolor === state.prevcolors[state.prevcolors.length - 2]) {\n        newcolor = parseInt(Math.random() * colors.length);\n      }\n      while (newquote === state.prevquotes[state.prevquotes.length - 1] || newquote === state.prevquotes[state.prevquotes.length - 2]) {\n        newquote = parseInt(Math.random() * quotes.length);\n      }\n      return {\n        quote: quotes[newquote].quote,\n        author: quotes[newquote].author,\n        color: colors[newcolor],\n        prevcolors: [...state.prevcolors, newcolor],\n        prevquotes: [...state.prevquotes, newquote],\n      }\n    });\n  }\n\n  render() {\n    const buttonClass = classNames('new-quote');\n    return (\n      <div className=\"App-header\" style={{backgroundColor: this.state.color, transition: \"all 1s ease\"}}>\n        <div className=\"quote-box\">\n          <div className=\"text\" style={{color: this.state.color, transition: 'all 1s ease'}}>\n              <i>{this.state.quote}</i>\n            <div className=\"author\" style={{color: this.state.color, transition: 'all 1s ease'}}>\n              <b>- {this.state.author}</b>\n              <div>\n                <button className='twitter' onClick={() => window.open('https://twitter.com/intent/tweet?hashtags=quotes&text=' + encodeURIComponent('\"' + this.state.quote + '\" \\n-' + this.state.author))} style={{backgroundColor: this.state.color, transition: 'all 1s ease'}}><FontAwesomeIcon icon={faTwitter} /></button>\n                <button className='tumblr'  onClick={() => window.open('https://www.tumblr.com/widgets/share/tool?posttype=quote&tags=quotes&caption=' + encodeURIComponent(this.state.author) + '&content=' + encodeURIComponent(this.state.quote) + '&canonicalUrl=https%3A%2F%2Fwww.tumblr.com%2Fbuttons&shareSource=tumblr_share_button')} style={{backgroundColor: this.state.color, transition: 'all 1s ease'}}><FontAwesomeIcon icon={faTumblr} /></button>\n                <button ref='button' className={buttonClass} onClick={this.changeQuote} style={{backgroundColor: this.state.color, transition: \"all 1s ease\"}}>New Quote</button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <i style={{fontSize: '0.5em', marginTop: '1em'}}>Created by Raphael Fretter</i>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}